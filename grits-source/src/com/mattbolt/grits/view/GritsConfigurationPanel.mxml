<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  MATTBOLT.BLOGSPOT.COM
//  Copyright(C) 2010 Matt Bolt
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at:
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
-->

<!---
* This class is used as the configuration panel for Grits.
* 
* @author Matt Bolt [mbolt35&#64;gmail.com]
-->
<s:Window 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:ifone="com.mattbolt.ifone.*"
    xmlns:grits="com.mattbolt.grits.view.*"
    systemChrome="none"
    showStatusBar="false"
    width="325" height="165">
    
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    
    <fx:Script>
        <![CDATA[
            
            /**
             * This method creates, displays, and returns a new <code>GritsConfigurationPanel</code>.
             */
            public static function show():GritsConfigurationPanel {
                var config:GritsConfigurationPanel = new GritsConfigurationPanel();
                config.open();
                
                return config;
            }
            
            /**
             * @private
             * handler for the flash trace log changed
             */
            private function onLogFlashTracesChanged():void {
                
            }
            
            /**
             * @private
             * handler for the flash trace log changed
             */
            private function onOkClicked():void {
                this.close();
            }
            
            /**
             * @private
             * handler for the flash trace log changed
             */
            private function onCancelClicked():void {
                this.close();
            }
            
            [Bindable("nativeWindowChanged")]
            
            /**
             * @inheritDoc
             */
            public override function get nativeWindow():NativeWindow {
                return super.nativeWindow;
            }
 
        ]]>
    </fx:Script>
    
    <s:BorderContainer width="100%" height="100%" backgroundImage="@Embed(source='/../assets/images/bg.png')" backgroundImageFillMode="repeat">
        <s:layout>
            <s:VerticalLayout paddingBottom="0" paddingTop="0" paddingRight="0" paddingLeft="0"/>
        </s:layout>
        
        <grits:GritsWindowTitleBar 
            left="0" top="0"
            width="100%"
            nativeWindow="{nativeWindow}" 
            windowTitle="Grits Configuration"/>
            
        <ifone:IFoneSettingsPane width="100%" height="100%">
            <ifone:IFoneSettingsNode iconImage="@Embed(source='/../assets/icons/tabs20.png')" width="100%">
                <ifone:components>
                    <ifone:IFoneCheckBox width="100%" labelStyleName="iFoneCB" label="Use Tabbed Logging:" selected="true"/>
                </ifone:components>
            </ifone:IFoneSettingsNode>
            <ifone:IFoneCheckBox width="100%" labelStyleName="iFoneCB" label="Save Logs to File System:" selected="false"/>
            <ifone:IFoneCheckBox width="100%" labelStyleName="iFoneCB" label="Log Flash Traces:" selected="false" selectedChange="onLogFlashTracesChanged();"/>
        </ifone:IFoneSettingsPane>
       
    </s:BorderContainer>
</s:Window>
