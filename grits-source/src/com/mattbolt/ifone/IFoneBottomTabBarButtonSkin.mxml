<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  MATTBOLT.BLOGSPOT.COM
//  Copyright(C) 2010 Matt Bolt
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at:
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
-->

<!---
* This class skins a button just like the icon style tab buttons on the iphone.
* 
* @author Matt Bolt [mbolt35&#64;gmail.com]
-->
<s:SparkSkin 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    minWidth="21" minHeight="44" maxHeight="44"
    alpha.disabledStates="0.5">
    
    <!-- host component -->
    <fx:Metadata>
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("com.mattbolt.ifone.IFoneBottomTabBarButton")]
    </fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            import flash.filters.DropShadowFilter;
            
            import mx.core.UIComponent;
            
            import spark.components.TabBar;
            
            
            /** 
             * @private
             */
            private static const exclusions:Array = [ "labelDisplay" ];
            
            /** 
             * @private
             */     
            public override function get colorizeExclusions():Array {
                return exclusions;
            }
            
            /**
             * @private
             */
            protected override function initializationComplete():void {
                useChromeColor = true;
                
                super.initializationComplete();
            }
            
            /**
             *  @private
             */
            protected override function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void {
                super.updateDisplayList(unscaledWidth, unscaledHeight);
                
                if (hostComponent.iconImage && !iconSelected) {
                    var mat:Matrix = new Matrix();
                    var gradSpr:Sprite = new Sprite();
                    var gfx:Graphics = gradSpr.graphics;
                    var bm:Bitmap = Bitmap(new hostComponent.iconImage());
                    
                    mat.createGradientBox(35, 35, toRadians(75));
                    
                    gfx.clear();
                    gfx.beginGradientFill(
                        GradientType.LINEAR, 
                        [ 0x97C1Ef, 0x2787E2, 0x39B2F1 ], 
                        [ 1.0, 1.0, 1.0 ], 
                        [80, 120, 200 ], 
                        mat );
                    
                    gfx.drawRect(0, 0, 35, 35);
                    gfx.endFill();
                    
                    var copy:Sprite = maskAndFlatten(gradSpr, bm);
                    copy.filters = [ new flash.filters.DropShadowFilter(2.0, 90) ];
                    
                    iconSelected = new UIComponent();
                    iconSelected.addChild( copy );
                }
            }
            
            /**
             * @private
             * converts degress to radians
             */
            private function toRadians(degrees:Number):Number {
                return degrees * (Math.PI / 180);
            }
            
            /**
             * @private
             * masks and flattens an image
             */
            private function maskAndFlatten(displayObject:DisplayObject, maskObject:DisplayObject):Sprite {
                // Define Containers
                var maskedResult:Sprite = new Sprite();
                var maskContainer:Sprite = new Sprite();
                var displayObjCopy:Sprite = new Sprite();
                
                // Make a copy of the "mask target"
                displayObjCopy.addChild( toBitmap(displayObject) );
                displayObjCopy.cacheAsBitmap = true;
                
                // Handles the Scale9 Case
                maskContainer.addChild(maskObject);
                
                // Initialize Bitmap Data -> We want to use the largest dimensions
                var bmMask:Bitmap = new Bitmap( 
                    new BitmapData( Math.max(displayObjCopy.width, maskContainer.width), 
                        Math.max(displayObjCopy.height, maskContainer.height),
                        true, 
                        0xFF0000 ));
                
                // Draw mask container into a bitmap
                bmMask.cacheAsBitmap = true;
                bmMask.blendMode = BlendMode.ALPHA;
                bmMask.bitmapData.draw(maskContainer);
                
                // Mask and add to mask result container -> order: obj copy, mask
                displayObjCopy.mask = bmMask;
                maskedResult.addChild(displayObjCopy);
                maskedResult.addChild(bmMask);
                
                return maskedResult;
            }
            
            /**
             * @private
             * converts a display object to a bitmap
             */
            private function toBitmap( displayObject:DisplayObject,  
                                       matrix:Matrix = null, 
                                       colorTransform:ColorTransform = null, 
                                       blendMode:String = null, 
                                       clipRect:Rectangle = null, 
                                       smoothing:Boolean = false ):Bitmap 
            {
                var bmCopy:Bitmap = new Bitmap(
                    new BitmapData(displayObject.width, displayObject.height, true, 0xFF0000), "auto", smoothing);
                bmCopy.cacheAsBitmap = true;
                bmCopy.bitmapData.draw(displayObject, matrix, colorTransform, blendMode, clipRect, smoothing);
                
                return bmCopy;
            }
            
            [Bindable]
            
            /**
             * @private
             * the selected icon
             */
            private var iconSelected:UIComponent;
            
        ]]>
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" stateGroups="deselectedStates" />
        <s:State name="over" stateGroups="overStates, deselectedStates" />
        <s:State name="down" stateGroups="downStates, deselectedStates" />
        <s:State name="disabled" stateGroups="disabledStates, deselectedStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>

    <s:Rect width="100%" height="44" radiusX="5" radiusY="5">
        <s:fill>
            <s:SolidColor 
                color="#FFFFFF" 
                alpha.up="0"
                alpha.over="0.1"
                alpha.down="0.15"
                alpha.upAndSelected="0.15"
                alpha.overAndSelected="0.15"
                alpha.downAndSelected="0.15"/>
        </s:fill>
    </s:Rect>
    
    <s:HGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="0" paddingTop="0" paddingRight="0" paddingLeft="0">
        <mx:Image width="30" height="30" maintainAspectRatio="true" scaleContent="false"
            source.deselectedStates="{hostComponent.iconImage}"
            source.selectedStates="{iconSelected}"/>
    </s:HGroup>
    
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="bottom"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2">
        
        <s:filters>
            <fx:Array>
                <s:DropShadowFilter color="#282828" blurX="0" blurY="1" distance="1" quality="3" inner="false" angle="90" />
            </fx:Array>
        </s:filters>
    </s:Label>
    
</s:SparkSkin>
