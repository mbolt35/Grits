
<s:SparkSkin 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
    xmlns:ifone="com.mattbolt.ifone.*"
    alpha.disabledGroup="0.5" >
    
    <fx:Metadata>
        /**
         * This meta-data defines the component to use the skin with
         */ 
        [HostComponent("com.mattbolt.ifone.IFoneWindow")]
    
        /**
         * This style represents the background image used in the window
         */
        [Style(name="backgroundImage", type="Class", inherit="no")]
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
            
            [Bindable]
            
            /**
             * @private
             * the background image class to use for the window
             */
            private var _backgroundClass:Class;
            
            [Bindable]
            
            /**
             * @private
             * the owning ifone window
             */
            private var _ownerWindow:IFoneWindow;
            
            /**
             * @private
             * exclusions for styling
             */
            private static const exclusions:Array = [
                "backgroundRect", 
                "contentGroup", 
                "statusText"
            ];
            
            /**
             * @private
             */
            public override function get colorizeExclusions():Array {
                return exclusions;
            }
            
            /**
             * @private
             */
            protected override function initializationComplete():void {
                useChromeColor = true;
                
                _ownerWindow = IFoneWindow(owner);
                
                super.initializationComplete();
            } 
            
            /**
             * @inheritDoc
             */
            public override function styleChanged(styleProp:String):void {
                if (styleProp == "backgroundImage") {
                    _backgroundClass = getStyle(styleProp);
                    return;
                }
                
                super.styleChanged(styleProp);
            }
            
            /**
             * @private
             */
            protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
                backBackgroundFill.color = getStyle("backgroundColor");
                backBackgroundFill.alpha = backgroundFill.alpha = getStyle("backgroundAlpha");
                
                _backgroundClass = getStyle("backgroundImage");
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        
        ]]>
    </fx:Script>
    
    <!-- Window States -->
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" stateGroups="disabledGroup" />
        <s:State name="normalAndInactive" stateGroups="inactiveGroup" />
        <s:State name="disabledAndInactive" stateGroups="disabledGroup, inactiveGroup" />
    </s:states>

    <!---
     * Defines the solid color background content within the skin
     -->
    <s:Rect id="backBackgroundRect" left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:SolidColor id="backBackgroundFill"/>
        </s:fill>
    </s:Rect>
    
    <!--- 
     * Defines the background content within the skin
     -->
    <s:Rect id="backgroundRect" left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:BitmapFill id="backgroundFill" source="{_backgroundClass}" fillMode="repeat"/>
        </s:fill>
    </s:Rect>

    <!--
     * @private
     * contains the content and status bar 
     -->
    <s:Group left="0" right="0" top="0" bottom="0" minHeight="24" minWidth="0">
        <s:layout>
            <s:VerticalLayout gap="0"/>
        </s:layout>
    
        <ifone:IFoneTitleBar 
            left="0" top="0"
            width="100%" 
            windowTitle="{parentDocument.title}"
            nativeWindow="{parentDocument.nativeWindow}"
            rightButtonText="{_ownerWindow.closeButtonLabel}"
            leftButtonText="{_ownerWindow.contextButtonLabel}"/>
        
        <!--- @copy spark.components.SkinnableContainer#contentGroup -->
        <s:Group id="contentGroup" width="100%" height="100%" minHeight="0" minWidth="0"/>
        
        <!-- status bar -->
        <!--- @copy spark.components.WindowedApplication#statusBar -->
        <s:Group id="statusBar" width="100%" minHeight="24" >
        
            <!-- status bar fill -->
            <s:Rect left="0" right="0" top="0" bottom="0">
               <s:fill>
                    <s:LinearGradient rotation="90">
                        <s:GradientEntry color="0xE2E2E2" />
                        <s:GradientEntry color="0xD9D9D9" />
                    </s:LinearGradient>
               </s:fill>
            </s:Rect>
            
            <!-- status bar highlight -->
            <s:Rect left="1" right="1" top="1" bottom="0" >
               <s:stroke>
                    <s:LinearGradientStroke rotation="90" weight="1">
                        <s:GradientEntry color="0xEAEAEA" />
                        <s:GradientEntry color="0xBEBEBE" />
                    </s:LinearGradientStroke>
               </s:stroke>
            </s:Rect>
        
            <!-- status text -->
            <!--- @copy spark.components.WindowedApplication#statusText -->
            <s:Label id="statusText" top="2" bottom="2" left="10" right="10" verticalAlign="middle" 
                fontSize="10" color="0x585858" width="100%" maxDisplayedLines="1" />

        </s:Group> 
    </s:Group>

</s:SparkSkin>
