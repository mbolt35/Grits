<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  MATTBOLT.BLOGSPOT.COM
//  Copyright(C) 2010 Matt Bolt
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at:
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
-->

<!---
* This class is used to skin an <code>TabBar</code> instance.
* 
* @author Matt Bolt [mbolt35&#64;gmail.com]
-->
<s:Skin 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
    xmlns:ifone="com.mattbolt.ifone.*"
    creationComplete="onCreationComplete();"
    alpha.disabled="0.5" xmlns:mx="library://ns.adobe.com/flex/mx" >
    
    <fx:Metadata>
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.TabBar")]
    </fx:Metadata> 
    
    <fx:Declarations>
        <s:Move id="moveAnimation" duration="225" autoCenterTransform="true" target="{arrow}"/>
    </fx:Declarations>
    
    <fx:Script fb:purpose="styling" >
        <![CDATA[ 
            import mx.core.UIComponent;
            import mx.events.IndexChangedEvent;
            
            import spark.components.NavigatorContent;
            
            
            //--------------------------------------------------------------------------
            //
            //  Event Handlers
            //
            //--------------------------------------------------------------------------
            
            /**
             * @private
             * handle creation complete
             */
            private function onCreationComplete():void {
                hostComponent.dataProvider.addEventListener(IndexChangedEvent.CHANGE, onDataProviderChanged);
                updateArrowPositionTo( rendererAt(0) );
            }
            
            /**
             * @private
             * handle data provider index changed
             */
            private function onDataProviderChanged(event:IndexChangedEvent):void {
                updateArrowPositionTo( rendererAt(event.newIndex) );
            }
            
            
            //--------------------------------------------------------------------------
            //
            //  Helper Methods
            //
            //--------------------------------------------------------------------------
            
            /**
             * @private
             * locates the renderer given an item index.
             */
            private function rendererAt(itemIndex:int):IFoneBottomTabBarButton {
                for (var i:int = 0; i < dataGroup.numElements; ++i) {
                    var renderer:IFoneBottomTabBarButton = dataGroup.getElementAt(i) as IFoneBottomTabBarButton;
                    
                    if (renderer && itemIndex == renderer.itemIndex) {
                        return renderer;
                    }
                }
                
                return null;
            }
            
            /**
             * @private
             * updates the arrow position to the correct item renderer.
             */
            private function updateArrowPositionTo(renderer:IFoneBottomTabBarButton):void {
                if (!renderer) {
                    return;
                }
                
                moveAnimation.xTo = renderer.x + (renderer.width * 0.5) - (arrow.width * 0.5);
                moveAnimation.xFrom = arrow.x;
                moveAnimation.yTo = -arrow.height + 1;
                
                moveAnimation.play();
            }
            
            
            //--------------------------------------------------------------------------
            //
            //  Override Methods
            //
            //--------------------------------------------------------------------------
            
            /**
             *  @private
             *  Push the cornerRadius style to the item renderers.
             */
            protected override function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void {
                super.updateDisplayList(unscaledWidth, unscaledHeight);
                
                const numElements:int = dataGroup.numElements;
                
                for (var i:int = 0; i < numElements; ++i) {
                    var itemRenderer:IFoneBottomTabBarButton = dataGroup.getChildAt(i) as IFoneBottomTabBarButton;
                    var data:* = hostComponent.dataProvider.getItemAt(itemRenderer.itemIndex);
                    
                    if (itemRenderer && data) {
                        itemRenderer.setStyle("icon", data.icon);
                    }
                }
                
            }

        ]]>            
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
            
    <!---
     * @private
     -->
    <s:BorderContainer 
        width="100%" minHeight="54" height="54" maxHeight="54"
        borderWeight="0" 
        backgroundImage="@Embed(source='/../assets/skins/ifone-bottom-tab/bottom-tab-bg.png')"
        backgroundImageFillMode="repeat"/>
    
    <!---
     * @private
     -->
    <mx:Image id="arrow" 
        y="{-arrow.height + 1}" 
        source="@Embed(source='/../assets/skins/ifone-bottom-tab/tab-arrow2.png')" 
        autoLoad="true" 
        maintainAspectRatio="true" 
        scaleContent="false"/>
    
    <!--- 
     * @copy spark.components.SkinnableDataContainer#dataGroup 
     -->
    <s:DataGroup id="dataGroup" width="100%" height="100%">
        <s:layout>
            <s:HorizontalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" gap="5"/>
        </s:layout>
        <s:itemRenderer>
            <fx:Component>
                <ifone:IFoneBottomTabBarButton width="100%"/>
            </fx:Component>
        </s:itemRenderer>
    </s:DataGroup>
    
</s:Skin>
