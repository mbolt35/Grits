<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  MATTBOLT.BLOGSPOT.COM
//  Copyright(C) 2010 Matt Bolt
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at:
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
-->

<!---
* This class represents an iPhone styled settings panel node skin.
* 
* @author Matt Bolt [mbolt35&#64;gmail.com]
-->
<s:Skin 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
    xmlns:ifone="com.mattbolt.ifone.*"
    alpha.disable="0.5"
    creationComplete="onCreationComplete();">
    
    <fx:Metadata>
        /**
         * This meta-data defines the component to use the skin with
         */ 
        [HostComponent("com.mattbolt.ifone.IFoneSettingsNode")]
    </fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            
            /**
             * @private
             * handle creation complete
             */
            private function onCreationComplete():void {
                currentState = "normal";
            }
            
            /**
             * @inheritDoc
             */
            protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            /**
             * @inheritDoc
             */
            protected override function stateChanged(oldState:String, newState:String, recursive:Boolean):void {
                super.stateChanged(oldState, newState, recursive);
                
                if (currentState == "normal" || currentState == "disabled") {
                    if (hostComponent.iconImage && hostComponent.label) {
                        currentState = hostComponent.enabled ? "iconAndLabel" : "iconAndLabelDisabled";
                    } else if (hostComponent.iconImage && !hostComponent.label) {
                        currentState = hostComponent.enabled ? "iconOnly" : "iconOnlyDisabled";
                    } else if (!hostComponent.iconImage && hostComponent.label) {
                        currentState = hostComponent.enabled ? "labelOnly" : "labelOnlyDisabled";
                    } 
                }
            }
            
        ]]>
    </fx:Script>
    
    <!-- States and Transitions -->
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled"/>
        
        <s:State name="iconOnly" stateGroups="icon"/>
        <s:State name="labelOnly" stateGroups="label"/>
        <s:State name="iconAndLabel" stateGroups="icon,label"/>
        
        <s:State name="iconOnlyDisabled" stateGroups="icon,disable"/>
        <s:State name="labelOnlyDisabled" stateGroups="label,disable"/>
        <s:State name="iconAndLabelDisabled" stateGroups="icon,label,disable"/>
    </s:states>
    
    <!--- 
     * @private 
     -->
    <s:Rect id="backRect" x="0" y="0" width="100%" height="100%" 
        bottomLeftRadiusX="{hostComponent.isBottom ? hostComponent.radius : 0}" bottomLeftRadiusY="{hostComponent.isBottom ? hostComponent.radius : 0}" 
        bottomRightRadiusX="{hostComponent.isBottom ? hostComponent.radius : 0}" bottomRightRadiusY="{hostComponent.isBottom ? hostComponent.radius : 0}"
        topLeftRadiusX="{hostComponent.isTop ? hostComponent.radius : 0}" topLeftRadiusY="{hostComponent.isTop ? hostComponent.radius : 0}"
        topRightRadiusX="{hostComponent.isTop ? hostComponent.radius : 0}" topRightRadiusY="{hostComponent.isTop ? hostComponent.radius : 0}">
        
        <s:fill>
            <s:SolidColor color="#FFFFFF"/>
        </s:fill>
        
        <s:stroke>
            <s:SolidColorStroke color="#ABABAB" pixelHinting="true" caps="round" weight="2" alpha="0.5"/>
        </s:stroke>
    </s:Rect>
    
    <!--- 
     * @private 
     -->
    <s:HGroup id="contentGroup" x="0" y="0" width="100%" height="100%" horizontalAlign="left" verticalAlign="middle" paddingLeft="10" paddingRight="10"> 
        <ifone:IFoneIcon includeIn="icon" icon="{hostComponent.iconImage}"/>
        <s:Label includeIn="label" text="{hostComponent.label}" styleName="{hostComponent.labelStyleName}"/>
        <mx:Spacer includeIn="icon,label" width="100%"/>
    </s:HGroup>

</s:Skin>
